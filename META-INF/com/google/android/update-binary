#!/sbin/sh
# 
##########################################################################################
# 
# Magisk
# by topjohnwu
# 
# This is a Magisk Module Uninstaller ZIP for Developers
# By Dark1
# Profile :
# https://forum.xda-developers.com/member.php?u=7292542
# https://github.com/dark-1
# 
# This script removes the Magisk Module files.
# 
# DO Not Touch this Script Unless Necessary.
# 
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() 
{
  if $BOOTMODE; then
    echo "$1"
  else 
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

is_mounted() 
{
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() 
{
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting \"$1\" to \"$2\""
          break;
        fi
      fi
    done
  fi
}

mktouch() 
{
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

image_size_check() 
{
  e2fsck -yf $1
  local Blocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  local UsedM=`echo "$Blocks" | cut -d/ -f1`
  local SizeM=`echo "$Blocks" | cut -d/ -f2`
  curFreeM=$(((SizeM - UsedM) * 4 / 1024))
  curUsedM=$((UsedM * 4 / 1024 + 1))
  curSizeM=$((SizeM * 4 / 1024))
}

# Shrinking By ReSizeing the Image IF possible
image_resize_shrink()
{
  local CHKIMG=$1
  # Shrink the Image IF possible
  image_size_check $CHKIMG
  local NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
  if [ "$curSizeM" -gt "$NEWDATASIZE" ]; 
  then
    ui_print "- Shrinking \"$CHKIMG\" to ${NEWDATASIZE} M ..."
    resize2fs $CHKIMG ${NEWDATASIZE}M
  fi
}

# Image Check
image_check() 
{
  local CHKIMG=$1
  if [ -f "$CHKIMG" ];
  then
    ui_print "- \"$CHKIMG\" Detected!"
  else
    ui_print "! \"$CHKIMG\" NOT Detected!"
    ui_print "! Magisk is NOT Installed!"
    ui_print "! Magisk is Required for this Uninstaller!"
    ui_print "! Hence!... Abort"
    exit 1
  fi
}

###########################################
## Flashable update-binary preparation   ##
###########################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0
  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "! Magisk is NOT Activated!... Abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

# This path should work in any cases
TMPDIR=/dev/tmp

MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

MODPATH=$MOUNTPATH/$MODID

###########################################
## Main                                  ##
###########################################

ui_print " "
# Print MOD name
print_modname
ui_print " "
# Please leave this message in your flashable zip for credits :)
ui_print "*******************************"
ui_print " Magisk Module Uninstaller ZIP "
ui_print " By Dark1                      "
ui_print "*******************************"
ui_print " "
ui_print "*******************************"
ui_print " Powered by Magisk (@topjohnwu)"
ui_print "*******************************"
ui_print " "
ui_print "!!!*************************!!!"
ui_print "! Removing Magisk Module [MODID] : $MODID !"
ui_print "!!!*************************!!!"
ui_print " "

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if is_mounted /data;
then
  IMG=/data/$IMGNAME
  ui_print "- \"/data\" Availible !"
  image_check $IMG
else
  IMG=/cache/$IMGNAME
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data UnAvailible !!     *"
  ui_print "* Magisk Detection is Impossible  *"
  ui_print "* Uninstaller will still proceed  *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
  image_check $IMG
fi

mount_image $IMG $MOUNTPATH
if ! is_mounted $MOUNTPATH; then
  ui_print "! \"$IMG\" mount Failed!... Abort"
  exit 1
fi

if is_mounted $MOUNTPATH; then
  rm -rf $MODPATH 2>/dev/null
  ui_print "- Removed Magisk Module : \"$MODID\" !"
else
  mkdir -p $MODPATH
  mktouch $MODPATH/remove
  ui_print "- Will Remove Magisk Module \"$MODID\" on Next ReBoot !"
fi

ui_print "- Unmounting Partition's"

umount $MOUNTPATH
losetup -d $LOOPDEVICE
rmdir $MOUNTPATH

# Shrink the Image IF possible
image_resize_shrink $IMG

if ! $BOOTMODE; then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- Done"
exit 0
